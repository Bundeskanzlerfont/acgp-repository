<?xml version="1.0" encoding="UTF-8"?>
<?oracle-xsl-mapper <!-- SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY. -->
  <mapSources>
    <source type="WSDL">
      <schema location="nominasbel.wsdl"/>
      <rootElement name="rendicionRespuesta" namespace="http://bci.ws/infraestructuradenegocios/nominas/nominasbel"/>
    </source>
  </mapSources>
  <mapTargets>
    <target type="WSDL">
      <schema location="EnvioNominas_EnvioNominas_BCI_RS.wsdl"/>
      <rootElement name="RindeNominaOutput" namespace="http://bicevida.ws/services/envionominas"/>
    </target>
  </mapTargets>
  <!-- GENERATED BY ORACLE XSL MAPPER 10.1.3.5.0(build 090730.0200.1754) AT [WED MAR 09 18:30:21 CLST 2011]. -->
?>
<xsl:stylesheet version="2.0" xmlns:ns1="http://bci.ws/infraestructuradenegocios/nominas/nominasbel" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
                xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions" xmlns:ns2="http://bci.ws/infraestructuradenegocios/nominas/nominasbel/types/rut"
                xmlns:tns="http://oracle.com/esb/namespaces/EnvioNominas" xmlns:ns0="http://www.w3.org/2001/XMLSchema" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:serv="http://bci.ws/infraestructuradenegocios/nominas/nominasbel/types" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:out1="http://bicevida.ws/services/envionominas" xmlns:ora="http://schemas.oracle.com/xpath/extension"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath" xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
				exclude-result-prefixes="xsl ns1 wsdl ns2 ns0 soap serv tns out1 bpws ehdr hwf xp20 xref ora ids orcl">
	<xsl:template match="/">
		<out1:RindeNominaOutput>
            <xsl:if test="/ns1:rendicionRespuesta != ''">
                <out1:respuestaServicio>
                    <xsl:value-of select="/ns1:rendicionRespuesta/serv:codigoRespuesta"/>
                </out1:respuestaServicio>
                <out1:nominas>
                    <xsl:for-each select="/ns1:rendicionRespuesta/serv:archivos/serv:archivo">
                        <out1:nomina>
                            <out1:folioProceso>
                                <!-- Separar por . tomar segundo nodo -->
                                <xsl:value-of select="substring-before(substring-after(serv:nombre,'.'),'.')"/>
                            </out1:folioProceso>
                            <out1:registrosNomina>
                                <xsl:call-template name="parseaCuerpo">
                                    <xsl:with-param name="str" select="serv:cuerpo"/>
                                </xsl:call-template>
                            </out1:registrosNomina>
                        </out1:nomina>
                    </xsl:for-each>
                </out1:nominas>
            </xsl:if>
		</out1:RindeNominaOutput>
	</xsl:template>
	<xsl:template name="parseaCuerpo">
    	<xsl:param name="str"/>
		<xsl:choose>
	        <xsl:when test="string-length($str) > 290">
	        	<xsl:call-template name="makeRegistro">
					<xsl:with-param name="str" select="substring($str,1,290)"/>
				</xsl:call-template>
				<xsl:call-template name="parseaCuerpo">
					<xsl:with-param name="str" select="substring($str,291)"/>
				</xsl:call-template>
	        </xsl:when>
			<xsl:otherwise>
				<xsl:if test="string-length($str) > 134">
					<xsl:call-template name="makeRegistro">
						<xsl:with-param name="str" select="substring($str,1,290)"/>
					</xsl:call-template>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="makeRegistro">
		<xsl:param name="str"/>
			<out1:registro>
				<out1:idRegistro>
					<xsl:value-of select="substring($str,65,12)"/>
				</out1:idRegistro>
				<out1:rut>
					<xsl:value-of select="substring($str,1,8)"/>
				</out1:rut>
				<out1:digitoVerificador>
					<xsl:value-of select="substring($str,9,1)"/>
				</out1:digitoVerificador>
				<out1:nombre>
					<xsl:value-of select="substring($str,10,45)"/>
				</out1:nombre>
				<out1:formaPago>
					<xsl:value-of select="substring($str,89,3)"/>
				</out1:formaPago>
				<out1:banco>
					<xsl:value-of select="substring($str,92,3)"/>
				</out1:banco>
				<out1:cuenta>
					<xsl:value-of select="substring($str,95,12)"/>
				</out1:cuenta>
				<out1:numeroDocumentoPago>
					<xsl:value-of select="substring($str,77,12)"/>
				</out1:numeroDocumentoPago>
				<out1:monto>
					<xsl:value-of select="substring($str,110,13)"/>
				</out1:monto>
				<out1:oficinaDestino>
					<xsl:value-of select="substring($str,107,3)"/>
				</out1:oficinaDestino>
				<out1:fechaMovimiento>
					<xsl:variable name="fecha" select="substring($str,123,8)"/>
					<xsl:value-of select="concat(substring($fecha,5,4),'-',substring($fecha,3,2),'-',substring($fecha,1,2))"/>
				</out1:fechaMovimiento>
				<!--out1:tipoDocumentoPago>
					<xsl:value-of select="."/>
				</out1:tipoDocumentoPago-->
				<out1:glosa>
					<xsl:value-of select="substring($str,136,50)"/>
				</out1:glosa>
				<out1:estadoPago>
					<xsl:value-of select="substring($str,131,5)"/>
				</out1:estadoPago>
			</out1:registro>
	</xsl:template>
</xsl:stylesheet>