// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.0.0, build 060119.1546.05277)

package cl.bicevida.core.model.services.ws.proxy.oid.runtime;

import oracle.j2ee.ws.client.BasicService;
import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.encoding.soap.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class OidBasicWebService_Service_SerializerRegistry extends SerializerRegistryBase implements SerializerConstants {
    public OidBasicWebService_Service_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping11 = registry.getTypeMapping(SOAPEncodingConstants.getSOAPEncodingConstants(SOAPVersion.SOAP_11).getURIEncoding());
        TypeMapping mapping = registry.getTypeMapping("");
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "getUserPropertyValuesResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserPropertyValues_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserPropertyValues_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deleteGroupsFromGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroupsFromGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroupsFromGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deleteUsersFromGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteUsersFromGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteUsersFromGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "getUserGroupsDN");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsDN_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsDN_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "getUserGroupsDNResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsDN_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsDN_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsDNResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDN_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDN_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsDnByFilterResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDnByFilter_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDnByFilter_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "createUser2");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser2_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser2_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "validateUserPassword");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_validateUserPassword_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_validateUserPassword_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "existsUserResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_existsUser_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_existsUser_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "createGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "allocateUserMembership");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateUserMembership_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateUserMembership_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "createUser2Response");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser2_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser2_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsCnByFilter");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCnByFilter_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCnByFilter_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "listGroupsInGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listGroupsInGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listGroupsInGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "createUser");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "createUserResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createUser_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "intelliActualizarUsuarioResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_intelliActualizarUsuario_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_intelliActualizarUsuario_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deallocateGroupToMainGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateGroupToMainGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateGroupToMainGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "modifyUserProperty");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_modifyUserProperty_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_modifyUserProperty_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deallocateGroupToMainGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateGroupToMainGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateGroupToMainGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "allocateUserMembershipResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateUserMembership_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateUserMembership_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "intelliActualizarUsuario");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_intelliActualizarUsuario_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_intelliActualizarUsuario_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "listUsersInGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listUsersInGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listUsersInGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/types/", "stringArray");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.types.oidservices.utils.types.runtime.StringArray_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.types.oidservices.utils.types.StringArray.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsDN");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDN_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDN_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deallocateUserMembership");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateUserMembership_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateUserMembership_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deleteGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "createGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_createGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "allocateGroupToMainGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateGroupToMainGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateGroupToMainGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deleteUsersFromGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteUsersFromGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteUsersFromGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "getUserPropertyValues");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserPropertyValues_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserPropertyValues_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "modifyUserPropertyResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_modifyUserProperty_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_modifyUserProperty_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "validateUserPasswordResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_validateUserPassword_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_validateUserPassword_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "allocateGroupToMainGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateGroupToMainGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_allocateGroupToMainGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "existsUser");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_existsUser_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_existsUser_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "getUserGroupsCN");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsCN_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsCN_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "listGroupsInGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listGroupsInGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listGroupsInGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsCnByFilterResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCnByFilter_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCnByFilter_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsCn");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCn_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCn_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deleteGroupResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroup_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroup_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsCnResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCn_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsCn_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "listUsersInGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listUsersInGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_listUsersInGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "getUserGroupsCNResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsCN_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_getUserGroupsCN_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deleteGroupsFromGroup");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroupsFromGroup_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deleteGroupsFromGroup_ReqS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "deallocateUserMembershipResponse");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateUserMembership_RespS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_deallocateUserMembership_RespS.class, type, serializer);
        }
        {
            QName type = new QName("http://utils.oidservices.bicevida.cl/", "findGroupsDnByFilter");
            CombinedSerializer serializer = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDnByFilter_ReqS_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebServiceSoapHttp_findGroupsDnByFilter_ReqS.class, type, serializer);
        }
        cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebService_Service_SerializerRegistry12 internal12Registry = new cl.bicevida.core.model.services.ws.proxy.oid.runtime.OidBasicWebService_Service_SerializerRegistry12();
        return internal12Registry.getRegistry(registry);
    }
    
    private static void registerSerializer(TypeMapping mapping, Class javaType, QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
